<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--<beans xmlns="http://www.springframework.org/schema/beans"-->
       <!--xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"-->
       <!--xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd-->
       <!--http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">-->

    <!--&lt;!&ndash; 配置文件 &ndash;&gt;-->
    <!--<context:property-placeholder location="classpath:config.properties" />-->

    <!--&lt;!&ndash; mongoDB的配置对象 &ndash;&gt;-->
    <!--<bean id="mongoOptions" class="com.mongodb.MongoOptions">-->
        <!--&lt;!&ndash; 服务器是否自动重连，默认为false &ndash;&gt;-->
        <!--<property name="autoConnectRetry" value="false" />-->
        <!--&lt;!&ndash; 对同一个服务器尝试重连的时间(毫秒)，设为0时默认使用15秒 &ndash;&gt;-->
        <!--<property name="maxAutoConnectRetryTime" value="0" />-->
        <!--&lt;!&ndash; 与每个主机的连接数，默认为10 &ndash;&gt;-->
        <!--<property name="connectionsPerHost" value="10" />-->
        <!--&lt;!&ndash; 连接超时时间(毫秒)，默认为10000 &ndash;&gt;-->
        <!--<property name="connectTimeout" value="10000" />-->
        <!--&lt;!&ndash; 是否创建一个finalize方法，以便在客户端没有关闭DBCursor的实例时，清理掉它。默认为true &ndash;&gt;-->
        <!--<property name="cursorFinalizerEnabled" value="true" />-->
        <!--&lt;!&ndash; 线程等待连接可用的最大时间(毫秒)，默认为120000 &ndash;&gt;-->
        <!--<property name="maxWaitTime" value="120000" />-->
        <!--&lt;!&ndash; 可等待线程倍数，默认为5.例如connectionsPerHost最大允许10个连接，则10*5=50个线程可以等待，更多的线程将直接抛异常 &ndash;&gt;-->
        <!--<property name="threadsAllowedToBlockForConnectionMultiplier" value="5" />-->
        <!--&lt;!&ndash; socket读写时超时时间(毫秒)，默认为0，不超时 &ndash;&gt;-->
        <!--<property name="socketTimeout" value="0" />-->
        <!--&lt;!&ndash; 是socket连接在防火墙上保持活动的特性，默认为false &ndash;&gt;-->
        <!--<property name="socketKeepAlive" value="false" />-->
        <!--&lt;!&ndash; 对应全局的WriteConcern.SAFE，默认为false &ndash;&gt;-->
        <!--<property name="safe" value="true" />-->
        <!--&lt;!&ndash; 对应全局的WriteConcern中的w，默认为0 &ndash;&gt;-->
        <!--<property name="w" value="0" />-->
        <!--&lt;!&ndash; 对应全局的WriteConcern中的wtimeout，默认为0 &ndash;&gt;-->
        <!--<property name="wtimeout" value="0" />-->
        <!--&lt;!&ndash; 对应全局的WriteConcern.FSYNC_SAFE，如果为真，每次写入要等待写入磁盘，默认为false &ndash;&gt;-->
        <!--<property name="fsync" value="false" />-->
        <!--&lt;!&ndash; 对应全局的WriteConcern.JOURNAL_SAFE，如果为真，每次写入要等待日志文件写入磁盘，默认为false &ndash;&gt;-->
        <!--<property name="j" value="false" />-->
    <!--</bean>-->

    <!--&lt;!&ndash; 使用工厂创建mongo实例 &ndash;&gt;-->
    <!--<bean id="mongo" class="me.watchzerg.test.morphia.spring.MongoFactoryBean">-->
        <!--&lt;!&ndash; mongoDB的配置对象 &ndash;&gt;-->
        <!--<property name="mongoOptions" ref="mongoOptions"/>-->

        <!--&lt;!&ndash; 是否主从分离(读取从库)，默认为false，读写都在主库 &ndash;&gt;-->
        <!--<property name="readSecondary" value="false"/>-->

        <!--&lt;!&ndash; 设定写策略，默认为WriteConcern.SAFE，优先级高于mongoOptions中的safe &ndash;&gt;-->
        <!--<property name="writeConcern" value="SAFE"/>-->

        <!--&lt;!&ndash; 设定服务器列表，默认为localhost:27017 &ndash;&gt;-->
        <!--<property name="serverStrings">-->
            <!--<array>-->
                <!--<value>${mongoDB.server}</value>-->
            <!--</array>-->
        <!--</property>-->
    <!--</bean>-->


    <!--&lt;!&ndash; 使用工厂创建morphia实例，同时完成类映射操作 &ndash;&gt;-->
    <!--<bean id="morphia" class="me.watchzerg.test.morphia.spring.MorphiaFactoryBean" >-->
        <!--&lt;!&ndash; 指定要扫描的POJO包路径 &ndash;&gt;-->
        <!--<property name="mapPackages">-->
            <!--<array>-->
                <!--<value>me.watchzerg.test.morphia.pojo</value>-->
            <!--</array>-->
        <!--</property>-->

        <!--&lt;!&ndash; 指定要映射的类 &ndash;&gt;-->
        <!--&lt;!&ndash; <property name="mapClasses">-->
            <!--<array>-->
                <!--<value>me.watchzerg.test.morphia.pojo.Hotel</value>-->
                <!--<value>me.watchzerg.test.morphia.pojo.Address</value>-->
            <!--</array>-->
        <!--</property> &ndash;&gt;-->

        <!--&lt;!&ndash; 扫描包时是否忽略不可用的类，默认为false &ndash;&gt;-->
        <!--&lt;!&ndash; <property name="ignoreInvalidClasses" value="false"/> &ndash;&gt;-->
    <!--</bean>-->

    <!--&lt;!&ndash; 使用工厂创建datastore，同时完成index和caps的确认操作 &ndash;&gt;-->
    <!--<bean id="datastore" class="me.watchzerg.test.morphia.spring.DatastoreFactoryBean" >-->
        <!--<property name="morphia" ref="morphia"/>-->
        <!--<property name="mongo" ref="mongo"/>-->

        <!--&lt;!&ndash; collection的名称 &ndash;&gt;-->
        <!--<property name="dbName" value="${mongoDB.dbName}"/>-->

        <!--&lt;!&ndash; 用户名和密码可以为空 &ndash;&gt;-->
        <!--&lt;!&ndash; <property name="username" value="my_username"/>-->
        <!--<property name="password" value="my_password"/> &ndash;&gt;-->

        <!--&lt;!&ndash; 是否进行index和caps的确认操作，默认为flase &ndash;&gt;-->
        <!--<property name="toEnsureIndexes" value="true"/>-->
        <!--<property name="toEnsureCaps" value="true"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; ===============以下是具体DAO的实现===================== &ndash;&gt;-->

    <!--<bean id="hotelDAO" class="me.watchzerg.test.morphia.dao.impl.HotelDAO">-->
        <!--<constructor-arg ref="datastore"/>-->
    <!--</bean>-->

<!--</beans>-->