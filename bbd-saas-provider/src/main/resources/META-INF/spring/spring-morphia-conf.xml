<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

    <!-- 配置文件 -->
     <context:property-placeholder location="classpath:mongo-conf.properties" />

    <!-- mongoDB的配置对象 -->
    <bean id="mongoOptions" class="com.bbd.db.morphia.BbdMongoOptions">
        <!-- 对应全局的WriteConcern中的w，默认为0 -->
        <property name="writeConcern" value="0" />
        <!-- 与每个主机的连接数，默认为10 -->
        <property name="minConnectionsPerHost" value="100" />
        <!-- 与每个主机的连接数，默认为10 -->
        <property name="maxConnectionsPerHost" value="200" />
        <!-- 可等待线程倍数，默认为5.例如connectionsPerHost最大允许10个连接，则10*5=50个线程可以等待，更多的线程将直接抛异常 -->
        <property name="threadsAllowedToBlockForConnectionMultiplier" value="2" />
        <!-- 线程等待连接可用的最大时间(毫秒)，默认为120000 -->
        <property name="maxWaitTime" value="120000" />
        <!-- 线程等待连接可用的最大时间(毫秒)，默认为120000 -->
        <property name="maxConnectionIdleTime" value="120000" />
        <!-- 线程等待连接可用的最大时间(毫秒)，默认为120000 -->
        <property name="maxConnectionLifeTime" value="120000" />
        <!-- 连接超时时间(毫秒)，默认为10000 -->
        <property name="connectTimeout" value="10000" />
        <!-- socket读写时超时时间(毫秒)，默认为0，不超时 -->
        <property name="socketTimeout" value="0" />

        <property name="heartbeatFrequency" value="0" />

        <property name="minHeartbeatFrequency" value="0" />
        <property name="heartbeatConnectTimeout" value="0" />
        <property name="heartbeatSocketTimeout" value="0" />
        <property name="localThreshold" value="0" />

        <!-- 是否创建一个finalize方法，以便在客户端没有关闭DBCursor的实例时，清理掉它。默认为true -->
        <property name="cursorFinalizerEnabled" value="true" />
    </bean>

    <!-- 使用工厂创建mongo实例 -->
    <bean id="mongo" class="com.bbd.db.morphia.MongoFactoryBean">
        <!-- mongoDB的配置对象 -->
        <property name="mongoClientOptions" ref="mongoOptions"/>

        <!-- collection的名称 -->
        <property name="dbName" value="${mongoDB.dbName}"/>

        <!-- 用户名和密码可以为空 -->
        <property name="userName" value="${mongoDB.userName}"/>
        <property name="password" value="${mongoDB.password}"/>


        <!-- 是否主从分离(读取从库)，默认为false，读写都在主库 -->
        <property name="readSecondary" value="false"/>

        <!-- 设定写策略，默认为WriteConcern.SAFE，优先级高于mongoOptions中的safe -->
        <property name="writeConcern" value="SAFE"/>

        <!-- 设定服务器列表，默认为localhost:27017 -->
        <property name="serverStrings">
            <array>
                <value>${mongoDB.server}</value>
            </array>
        </property>
    </bean>


    <!-- 使用工厂创建morphia实例，同时完成类映射操作 -->
    <bean id="morphia" class="com.bbd.db.morphia.MorphiaFactoryBean" >
        <!-- 指定要扫描的POJO包路径 -->
        <property name="mapPackages">
            <array>
                <value>${mongoDB.mapPackages}</value>
            </array>
        </property>

        <!-- 指定要映射的类 -->
        <!-- <property name="mapClasses">
            <array>
                <value>me.watchzerg.test.morphia.pojo.Hotel</value>
                <value>me.watchzerg.test.morphia.pojo.Address</value>
            </array>
        </property> -->

        <!-- 扫描包时是否忽略不可用的类，默认为false -->
        <!-- <property name="ignoreInvalidClasses" value="false"/> -->
    </bean>

    <!-- 使用工厂创建datastore，同时完成index和caps的确认操作 -->
    <bean id="datastore" class="com.bbd.db.morphia.DataStoreFactoryBean" >
        <property name="morphia" ref="morphia"/>
        <property name="mongoClient" ref="mongo"/>
        <!-- collection的名称 -->
        <property name="dbName" value="${mongoDB.dbName}"/>
        <!-- 是否进行index和caps的确认操作，默认为flase -->
        <property name="toEnsureIndexes" value="true"/>
        <property name="toEnsureCaps" value="true"/>
    </bean>

</beans>